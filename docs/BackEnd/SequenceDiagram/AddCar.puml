http://www.plantuml.com/plantuml/uml/ZLF9JiCm4BtxAwoUaaFLUwMYGba4GhGGxj6G35946eUnMwb_pmjkipX4ub9rnczvCuxNrf6umxvKb3aZ-bvCvUwgNDLe5rbHK-LqKXRxGMD3OZS0YYbBbj7H6zV65f0x3OvcQRh4SPhEDDa6g79oz46MzUsDKXThFR_wTTHBlTicxtf1TR788Dj4B8xas0TgVe0Dme05h5vfodESH2Xs9BItSKSFuWzBI0P3j9BV1vRJzQHkEFkmX2x6X5Ro-koLpX4xFhO0nFol0EPBvTm3JecNPDrZhbV-JsLPK4RnlpmyD_1Hmf_Q75d2wHxOeNEUHDWUIdTPKRCVBnOhneL2GgbC-BoZSNPqkulpmAWl78ye4_VU2n_c3U2jAHngWqN1sPcdPFlIRQjDE_RhCmFJaLFtFKymUcZ_LOFIliGnhNi2QsmNR_S7

@startuml
actor FrontEnd
participant Slim
participant CarsController
participant CarsRepository
participant "__:Car__" as Car
database DB

FrontEnd -> Slim : POST /api/cars
activate Slim
Slim -> CarsController : car = addCar(carParams)
activate CarsController
CarsController -> CarsRepository : car = queryAddCar(carParams)
activate CarsRepository
CarsRepository -> DB : SQL query addCar
activate DB
DB --> CarsRepository : ok
deactivate DB
CarsRepository -> DB : lastId = lastInsertId()
activate DB
DB --> CarsRepository : lastId
deactivate DB

ref over CarsRepository
GetCar query result = queryCar(lastId)
end ref

create Car
CarsRepository -> Car : car = create(query result)
CarsRepository --> CarsController : car
deactivate CarsRepository
CarsController -> Car : response = toJSON()
activate Car
Car --> CarsController : response
deactivate Car
CarsController --> Slim : response
deactivate CarsController
Slim --> FrontEnd : response
deactivate Slim
@enduml