http://www.plantuml.com/plantuml/uml/VLFBQiD03BphAqHEyI7axaD9ysYXX9OslPLYr4Ia2nklgrKA-VlAzPeahCdDgndDZ8GyYqgYnuC7sceGV91GwwhUGMDbjtKDrOeRxmvNXQMuNvQuCAu4xrc6q3TkGdGcUhf2HrLLTeog6Y75HCyu2-e9zWKxKlgYoBYS0_GXSNBtdmrBV5ozuvGQDzrrvj3M3S-ZbhXdJTLn0HbkJVa4vl1pP3dTUtzkpLbjwzouczTrnmTxJeO4anuAnwFN2E13QAvgwBdUwpTiXKavAGnw9inyE-xuKkQZ_YnwZGNr0jPbhrijR3Smv3QqKfD9Qr-xg4WYT4eJPVKqrgszcvo6fytByxZ8udO0sECYIc8DXqkJv7Rdux6ncr17JaTZG7zX9RPss5uVp4p8VfG_

@startuml
actor FrontEnd
participant Slim
participant DriversController
participant DriversRepository
participant "__:Driver__" as Driver
participant "__:Car__" as Car
database DB

FrontEnd -> Slim : GET /api/drivers
Slim -> DriversController: getDrivers()
DriversController -> DriversRepository : queryAllDrivers()
DriversRepository -> DB : SQL query
DB --> DriversRepository: query results

loop query result length
create Driver
DriversRepository -> Driver : create(query result[n])
create Car
Driver -> Car : create(query result[n])
end

DriversRepository --> DriversController : driversList array

loop driversList array length
DriversController -> Driver : toJSON()
Driver -> Car : toJSON
Car --> Driver
Driver --> DriversController
end

DriversController --> Slim : response
Slim --> FrontEnd: JSON data
@enduml