http://www.plantuml.com/plantuml/uml/ZPFHJy8m4CRV-rSqFB54mZk91Xce6AC84X-NSpkJnh7EQqT2ZF-xLpisLlR02u7sxlTzzt6T6Wjagrqk8BMQv1tfmYwAJ9Hyh59LGc7b9bUxpa4CP68k99tdI6TNQoorKOmxTAu6IJBXwoGPI32kK6HWuGCColbCYAEq7DtyAyg9N6tVv1XADKwPElw9RzV9SlxhhAezMFJ6t0Vt1AQucvlajQnALa6-7FhsAtU-0eATYLfIC570OdftheR-NI4TjfT8XCc8WCWQynbpDwzFdbexb-yFY_L2gepLFBv5ScpSC-gpfxz4XgU5eTnHBmTZbmptNmg3n3-7qKKYlZSG8loKUeyK3doFba_gsGXDbTjZW2uwpue4yWOmGeYKi8wj9weOsd_O5mvFmL7Vk7qBSk8zz1kKDw9kQLdLwiVDotCRLEEqNyjr1M9d2ktY1zK1hbvvBc_UpCGDNkh28BTrtyUK4-K7_WS0

@startuml
actor FrontEnd
participant Slim
participant CarsController
participant CarsRepository
participant "__:Car__" as Car
database DB

FrontEnd -> Slim : PUT /api/cars/{CAR_ID}
activate Slim
Slim -> CarsController : car = updateCar(CAR_ID, carParams)
activate CarsController
CarsController -> CarsRepository : car = queryUpdateCar(CAR_ID, carParams)
activate CarsRepository

CarsRepository -> DB : SQL query update WHERE id = CAR_ID
activate DB
DB --> CarsRepository : ok
deactivate DB
CarsRepository --> DB : lastId = lastInsertId()
activate DB
DB --> CarsRepository : lastId
deactivate DB
ref over CarsRepository
GetCar query result = queryCar(lastId)
end ref

create Car
CarsRepository -> Car : car = create(query result)
CarsRepository --> CarsController : car
deactivate CarsRepository
CarsController -> Car : data = toJSON()
activate Car
Car --> CarsController : data
deactivate Car
CarsController --> Slim : data
deactivate CarsController
Slim --> FrontEnd : response
deactivate Slim
@enduml