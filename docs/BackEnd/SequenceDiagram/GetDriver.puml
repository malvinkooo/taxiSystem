http://www.plantuml.com/plantuml/uml/VPD1Qm8n48Nl-HM39ps8Tw55TBUjfRHqXVQuf6OeWNLtcqH1Ilzx9usxYKpeGT7DUz-yDvgLTTAuuw4HSkyw0tUcQrtPAj7JOxtNlMmTx1fzk7fG67r2OpUaDLtJeCcTLjXtLXFqV7KwgUjbKDJr1AIzo9bc8mS1VH9AElaXBKAn5c882VFRlsomX7jqi92zNgWmVF5TLDktiggtnO-lfa_IOIZYtyZ9In0ckE46Fj65y-d8cKKExyzXD84j8ftmTKHp_cy6soB7-HbhWkvUdm8FtX_AgWIjQC08JPXhGVfvFjg5OD0U6oSKfgwzmPY91ubb2NFHJbFSR21iv60d3tsBXXmrzoiDAqmJybqnMnhHX-gxrY9joNMFkvVdALiyIyc5lWkzGaoMAJRDz-3vSw67VtZCp7qfr8kzQxp8t1blmWfRHLV_5m00

@startuml
actor FrontEnd
participant Slim
participant DriversController
participant DriversRepository
participant "__:Driver__" as Driver
participant "__:Car__" as Car
database DB

FrontEnd -> Slim : Get /api/drivers/{DRIVER_ID}
activate Slim
Slim -> DriversController : driver = getDriver(DRIVER_ID)
activate DriversController
DriversController -> DriversRepository : driver = queryDriver(DRIVER_ID)
activate DriversRepository
DriversRepository -> DB : SQL query WHERE id = DRIVER_ID
activate DB
DB --> DriversRepository : query result
deactivate DB
create Driver
DriversRepository -> Driver : create (query result)
create Car
Driver -> Car : create
DriversRepository --> DriversController: driver
deactivate DriversRepository
DriversController -> Driver : response = toJSON()
activate Driver
Driver -> Car : toJSON()
activate Car
Car --> Driver
deactivate Car
Driver --> DriversController
deactivate Driver
DriversController --> Slim : response
deactivate DriversController
Slim --> FrontEnd : response
deactivate Slim
@enduml